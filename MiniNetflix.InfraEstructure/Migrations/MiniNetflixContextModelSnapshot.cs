// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniNetflix.InfraEstructure.Context;

#nullable disable

namespace MiniNetflix.InfraEstructure.Migrations
{
    [DbContext(typeof(MiniNetflixContext))]
    partial class MiniNetflixContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MiniNetflix.Core.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MiniNetflix.Core.Entities.GenreSerie", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "SerieId");

                    b.HasIndex("SerieId");

                    b.ToTable("GenreSeries");
                });

            modelBuilder.Entity("MiniNetflix.Core.Entities.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Production");
                });

            modelBuilder.Entity("MiniNetflix.Core.Entities.Serie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LinkVideo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.ToTable("Serie");
                });

            modelBuilder.Entity("MiniNetflix.Core.Entities.GenreSerie", b =>
                {
                    b.HasOne("MiniNetflix.Core.Entities.Genre", "Genre")
                        .WithMany("GenreSeries")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MiniNetflix.Core.Entities.Serie", "Serie")
                        .WithMany("GenreSeries")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("MiniNetflix.Core.Entities.Serie", b =>
                {
                    b.HasOne("MiniNetflix.Core.Entities.Production", "Production")
                        .WithMany("Serie")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");
                });

            modelBuilder.Entity("MiniNetflix.Core.Entities.Genre", b =>
                {
                    b.Navigation("GenreSeries");
                });

            modelBuilder.Entity("MiniNetflix.Core.Entities.Production", b =>
                {
                    b.Navigation("Serie");
                });

            modelBuilder.Entity("MiniNetflix.Core.Entities.Serie", b =>
                {
                    b.Navigation("GenreSeries");
                });
#pragma warning restore 612, 618
        }
    }
}
